
    Lexer::Lexer(std::istream &stream) :
        in(stream), back_log('\0'), eof_flag(false) {}

    Lexer::Lexer(string file_path) :
        in(file_in), back_log('\0'), eof_flag(false)
    {
        file_in = std::ifstream(file_path);
    }

    Lexer::MatchStatus Lexer::next_match(Token &token)
    {
        int buffer_pointer = 0;
        int types_left = STATE_COUNT;
        memset(states, 0, STATE_COUNT * sizeof(int));
        memset(last_states, 0, STATE_COUNT * sizeof(int));

        while (types_left > 0 && !eof_flag)
        {
            char c = in.get();
            back_log = c;
            buffer_pointer++;
            token.data += c;
            if (c == EOF)
            {
                eof_flag = true;
                break;
            }

            for (int i = 0; i < STATE_COUNT; i++)
            {
                if (states[i] != -1)
                {
                    states[i] = type_table[i][states[i] * 128 + c];
                    if (states[i] == -1)
                        types_left--;
                }
            }

            if (types_left > 0)
                memcpy(last_states, states, STATE_COUNT * sizeof(int));
        }

        for (int i = 0; i < STATE_COUNT; i++)
        {
            if (last_states[i] != -1)
            {
                for (int j = 0; j < type_end_state_count[i]; j++)
                {
                    if (type_end_states[i][j] == last_states[i])
                    {
                        token.data.pop_back();
                        token.type = (Token::TokenType)i;
                        token.type_name = type_names[i];
                        return Lexer::MatchStatus::MATCH;
                    }
                }
            }
        }

        // If no types match
        return Lexer::MatchStatus::BLANK;
    }

    Token Lexer::next()
    {
        string buffer = "";
        if (back_log != '\0')
            buffer.push_back(back_log);

        Lexer::MatchStatus status;
        Token token;
        do
        {
            if (token.data.length() > 0)
                token.data = token.data.substr(1, token.data.length() - 1);
            status = next_match(token);

            if (status == Lexer::MatchStatus::ERROR)
                printf("Error: Unknown token '%s'\n", token.data.c_str());
        } while (status != Lexer::MatchStatus::MATCH && !eof_flag);

        buffer.pop_back();
        return token;
    }
