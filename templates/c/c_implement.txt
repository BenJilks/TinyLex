
typedef enum _MatchStatus
{
    MATCH,
    BLANK
} MatchStatus;

void INIT_NAME(
    LexerStream *lex)
{
    if (!lex->eof_flag)
        NEXT_NAME(lex);
}

#define CHAR_COUNT 128

static MatchStatus NEXT_MATCH_NAME(
    LexerStream *lex)
{
    Token *token = &lex->look;
    unsigned int state, next_state;
    char next_char, type;

    // Assign token info
    token->data_index = lex->index;
    token->line_index = lex->line_index;
    token->line_no = lex->line;
    token->column_no = lex->column;
    token->len = 0;

    state = 0;
    for (;;)
    {
        next_char = lexer_read_char(lex, lex->index);
        if (next_char == -1)
            break;

        next_state = table[state * CHAR_COUNT + next_char];
        printf("%u -%c-> %u\n", state, next_char, next_state);

        lex->index += 1;
        lex->column += 1;
        if (next_char == '\n')
        {
            lex->line_index = lex->index;
            lex->line += 1;
            lex->column = 0;
        }

        if (next_state == NONE)
        {
            // If the end state is not valid, 
            // there's no match
            type = end_states[state];
//            printf("Ending: %i -> %i\n", state, type);
            if (type == -1)
                break;

            // Otherwise there is one, so return so
            token->type_name = type_names[type];
            token->type = type;
            lex->index -= 1;
            lex->column -= 1;
            return MATCH;
        }

        state = next_state;
        token->len += 1;
    }

    // If there's nothing left, mark so
    if (lexer_read_char(lex, lex->index) == EOF)
        lex->eof_flag = 1;

    // If no types match
    return BLANK;
}

Token NEXT_NAME(
    LexerStream *lex)
{
    Token last = lex->look;

    // Find the next valid token
    MatchStatus status;
    do
    {
        status = NEXT_MATCH_NAME(lex);
    } while (status != MATCH && !lex->eof_flag);

    return last;
}

Token MATCH_NAME(
    LexerStream *lex, 
    char type, 
    const char *name)
{
    char token_data[80];
    char msg[128];
    Token look;

    // Check token type info
    look = lex->look;
    if (look.type != type)
    {
        memcpy(token_data, lexer_read_buffer(
            lex, look.data_index, look.len), 
            look.len);
        token_data[look.len] = '\0';

        sprintf(msg, "Expected '%s', got '%s' instead", 
            name, token_data);

        lexer_error(lex, lex->look, msg);
    }

    // Get the next token
    return NEXT_NAME(lex);
}
