
    class Lexer : public TinyLib::LexerInterface<Token, Token::TokenType>
    {
    public:
        Lexer(std::istream &stream);
        Lexer(string file_path);
        ~Lexer();

        char read_char(int index);
        char *read_buffer(int index, int len);
        string read_string(Token token);

        void error(string msg);
        void error(string msg, Token token);
        void report_errors(std::ostream &out = std::cout);

        virtual std::optional<Token> next() override;
        virtual std::optional<Token> consume(Token::TokenType type) override;
        virtual std::optional<Token> peek(int count = 0) override;
        virtual bool is_eof() const { return eof_flag; }

    private:
        enum class MatchStatus
        {
            MATCH,
            BLANK,
            ERROR
        };
        std::optional<Token> next_match();
        void init();

        enum class ErrorType
        {
            ParseError,
            IOError,
            Warning,
        };

        struct Error
        {
            ErrorType type;
            string message;
            int index;
        };

        std::istream &in;
        std::ifstream file_in;
        char *cache;
        int index, line_index;
        int line, column;

        vector<Error> errors;
        bool eof_flag;
        std::vector<Token> peek_queue;

    };
