
    class Lexer : public TinyLib::LexerInterface<Token, Token::TokenType>
    {
    public:
        Lexer(std::istream &stream);
        Lexer(string file_path);
        ~Lexer();

        char read_char(int index);
        char *read_buffer(int index, int len);
        string read_string(int index, int len);
        string read_data(Token tk) { return read_string(tk.data, tk.length); }

        void error(string msg);
        void error(string msg, Token token);
        void report_errors(std::ostream &out = std::cout);

        virtual Token next();
        virtual Token match(Token::TokenType type, string name);
        virtual const Token &get_look() const { return look; }
        virtual bool is_eof() const { return eof_flag; }

    private:
        enum class MatchStatus
        {
            MATCH,
            BLANK,
            ERROR
        };
        MatchStatus next_match(Token &token);
        void init();

        enum class ErrorType
        {
            ParseError,
            IOError,
            Warning,
        };

        struct Error
        {
            ErrorType type;
            string message;
            int index;
        };

        std::istream &in;
        std::ifstream file_in;
        char *cache;
        int index;

        vector<Error> errors;
        bool eof_flag;
        Token look;

    };
